generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  games     Game[]
}

enum ScoreType {
  time
  points
}

model Game {
  id          String   @id @default(uuid())
  name        String
  description String
  imageSrc    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String
  cheatScore  Int
  category    Category @relation(fields: [categoryId], references: [id])

  lobbies       Lobby[]
  averageScores GameAverageScore[]
  scoreType     ScoreType

  @@index([categoryId])
}

model Lobby {
  id                    String         @id @default(uuid())
  name                  String
  description           String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  scoreRestriction      Float
  difficulty            Int            @default(0)
  gameId                String
  numRewards            Int            @default(3)
  firstPlacePrize       Float          @default(0)
  secondPlacePrice      Float          @default(0)
  thirdPlacePrize       Float          @default(0)
  unspecifiedPlacePrize Float          @default(10)
  // rewards          Reward[]
  game                  Game           @relation(fields: [gameId], references: [id])
  sessions              LobbySession[]

  @@index([gameId])
}

model Reward {
  id        String   @id @default(uuid())
  userId    String // The user who won the reward
  scoreId   String   @unique
  value     Float // Amount rewarded
  place     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  score     Score    @relation(fields: [scoreId], references: [id])

  @@index([scoreId])
}

model LobbySession {
  id              String        @id @default(uuid())
  lobbyId         String
  startDateTime   DateTime      @default(now())
  expiredDateTime DateTime      @default(now())
  isActive        Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  scores          Score[]
  lobby           Lobby         @relation(fields: [lobbyId], references: [id])
  gameSessions    GameSession[]

  @@index([lobbyId])
}

model Score {
  id             String       @id @default(uuid())
  userId         String
  username       String
  lobbySessionId String
  createdAt      DateTime     @default(now())
  score          Float
  lobbySession   LobbySession @relation(fields: [lobbySessionId], references: [id])
  reward         Reward?

  @@index([lobbySessionId])
}

model GameAverageScore {
  id           String   @id @default(uuid())
  userId       String
  gameId       String
  game         Game     @relation(fields: [gameId], references: [id])
  timesPlayed  Int
  averageScore Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([gameId])
}

model GameSession {
  id             String       @id @default(uuid())
  userId         String
  gameId         String
  lobbySessionId String
  isValid        Boolean
  createdAt      DateTime     @default(now())
  expiresAt      DateTime
  startedAt      BigInt?
  lobbySession   LobbySession @relation(fields: [lobbySessionId], references: [id])

  @@index([lobbySessionId])
}

model UserStripeSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model UserStripeAccount {
  id                  String   @id @default(cuid())
  userId              String   @unique
  stripeAccountId     String?  @unique @map(name: "stripe_account_id") // ID provided by Stripe for Connect
  stripeBankAccountId String?  @unique @map(name: "stripe_bank_account_id") // If you're storing specific bank accounts
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model UserPayout {
  id             String       @id @default(cuid())
  userId         String
  amount         Float
  status         PayoutStatus @default(PENDING)
  stripePayoutId String?      @unique @map(name: "stripe_payout_id") // This is the ID from Stripe once the payout is initiated.
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum PayoutStatus {
  PENDING
  COMPLETED
  FAILED
}

// model UserPurchase {
//   id           String   @id @default(cuid())
//   userId       String
//   itemId       String // Reference to the item being purchased
//   amount       Int // Price in the smallest currency unit (e.g., cents)
//   status       String // e.g., "Pending", "Shipped", "Delivered"
//   purchaseDate DateTime @default(now())
// }

model UserCash {
  id        String   @id @default(cuid())
  userId    String   @unique
  cash      Float
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
