generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  games     Game[]
}

enum ScoreType {
  time
  points
}

model Game {
  id            String             @id @default(uuid())
  name          String
  description   String
  imageSrc      String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  category      Category           @relation(fields: [categoryId], references: [id])
  categoryId    String
  lobbies       Lobby[]
  averageScores GameAverageScore[]
  scoreType     ScoreType

  @@index([categoryId])
}

model Lobby {
  id               String   @id @default(uuid())
  name             String
  description      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  scoreRestriction Float
  difficulty       Int      @default(0)
  gameId           String
  numRewards       Int      @default(3)
  expiredDateTime  DateTime @default(now())
  startDateTime    DateTime @default(now())
  firstPlace       Float    @default(0)
  secondPlace      Float    @default(0)
  thirdPlace       Float    @default(0)
  unspecifiedPlace Float    @default(10)
  // rewards          Reward[]
  game             Game     @relation(fields: [gameId], references: [id])
  scores           Score[]

  @@index([gameId])
}

// model Reward {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   value     Float
//   lobbyId   String
//   lobby     Lobby    @relation(fields: [lobbyId], references: [id])

//   @@index([lobbyId])
// }

model Score {
  id        String   @id @default(uuid())
  userId    String
  lobbyId   String
  createdAt DateTime @default(now())
  score     Float //can be either a score or a time in milliseconds
  Lobby     Lobby    @relation(fields: [lobbyId], references: [id])

  // @@unique([gameId, userId, lobbyId]) // This allows a user to have a score for each game
  @@index([lobbyId])
}

model GameAverageScore {
  id           String   @id @default(uuid())
  userId       String
  gameId       String
  game         Game     @relation(fields: [gameId], references: [id])
  timesPlayed  Int
  averageScore Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([gameId])
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model UserCash {
  id     String @id @default(cuid())
  userId String @unique
  cash   Float
}
